{
	"InMemory$2Repository": {
		"prefix": "mem",
		"scope": "typescript",
		"body": [
			"import type { $2Filters, $2Input } from '\\$domain/$1/dtos';",
			"import type { $2 } from '\\$domain/$1/models';",
			"import type { $2Repository } from '\\$domain/$1/spi/$1.repository';",
			"import { randomUUID } from 'node:crypto';",
			"",
			"const entities: $2[] = [];",
			"export const InMemory$2Repository = (): $2Repository => {",
			"\treturn {",
			"\t\tfindOne: (id: string) => entities.find((_) => _.id === id) || null,",
			"\t\tfindAll: ({ page = 1, limit }: $2Filters) => {",
			"\t\t\tconst currentPage = Math.max(1, page);",
			"\t\t\tconst itemsPerPage = limit ? Math.max(1, limit) : entities.length;",
			"",
			"\t\t\tconst startIndex = (currentPage - 1) * itemsPerPage;",
			"\t\t\tconst endIndex = startIndex + itemsPerPage;",
			"",
			"\t\t\tconst paginatedEntities = entities.slice(startIndex, endIndex);",
			"",
			"\t\t\treturn {",
			"\t\t\t\tdata: paginatedEntities,",
			"\t\t\t\ttotal: entities.length,",
			"\t\t\t\tpage: currentPage,",
			"\t\t\t\tlimit: itemsPerPage",
			"\t\t\t};",
			"\t\t},",
			"\t\tcreate: ($1: $2Input) => {",
			"\t\t\tconst new$2 = {",
			"\t\t\t\t...$1,",
			"\t\t\t\tid: randomUUID(),",
			"\t\t\t\tcreatedAt: new Date(),",
			"\t\t\t\tupdatedAt: new Date()",
			"\t\t\t};",
			"\t\t\tentities.push(new$2);",
			"\t\t\treturn new$2;",
			"\t\t},",
			"\t\tpatch: (id: string, $1: Partial<$2Input>) => {",
			"\t\t\tconst $1Index = entities.findIndex((_) => _.id === id);",
			"\t\t\tif ($1Index === -1) {",
			"\t\t\t\tthrow Error();",
			"\t\t\t}",
			"\t\t\tconst updated$2 = {",
			"\t\t\t\t...entities[$1Index],",
			"\t\t\t\t...$1,",
			"\t\t\t\tupdatedAt: new Date()",
			"\t\t\t};",
			"\t\t\tentities[$1Index] = updated$2;",
			"\t\t\treturn updated$2;",
			"\t\t},",
			"\t\tdelete: (id: string) => {",
			"\t\t\tconst $1Index = entities.findIndex((_) => _.id === id);",
			"\t\t\tif ($1Index === -1) {",
			"\t\t\t\tthrow Error();",
			"\t\t\t}",
			"\t\t\tconst deleted$2 = entities[$1Index];",
			"\t\t\tentities.splice($1Index, 1);",
			"\t\t\treturn deleted$2;",
			"\t\t}",
			"\t};",
			"};"
		],
		"description": "In-memory repository for a generic Entity"
	}
}
